import os
import json
import shutil

def get_chrome_extensions(profile_path):
    """
    Get the list of installed Chrome extensions by reading the Chrome profile folder.

    Args:
        profile_path (str): The path to the Chrome profile directory.

    Returns:
        list: A list of extension IDs found in the profile directory.
    """
    extensions_dir = os.path.join(profile_path, 'Extensions')
    if not os.path.exists(extensions_dir):
        print(f"Extensions directory not found: {extensions_dir}")
        return []

    # List all extensions (each subfolder in the Extensions directory is an extension ID)
    extension_ids = os.listdir(extensions_dir)
    return extension_ids

def disable_extension_by_modifying_preferences(profile_path, extension_id):
    """
    Disable a Chrome extension by modifying the Preferences file in the profile.

    Args:
        profile_path (str): The path to the Chrome profile directory.
        extension_id (str): The ID of the Chrome extension to disable.

    Returns:
        bool: True if the extension was disabled successfully, False otherwise.
    """
    preferences_file = os.path.join(profile_path, 'Preferences')

    # Read the Preferences file
    try:
        with open(preferences_file, 'r', encoding='utf-8') as file:
            preferences = json.load(file)

        # Modify the Preferences file to disable the extension
        if 'extensions' in preferences and 'settings' in preferences['extensions']:
            if extension_id in preferences['extensions']['settings']:
                preferences['extensions']['settings'][extension_id]['state'] = 0  # 0 means disabled
                with open(preferences_file, 'w', encoding='utf-8') as file:
                    json.dump(preferences, file, indent=4)
                print(f"Successfully disabled extension: {extension_id}")
                return True
            else:
                print(f"Extension ID {extension_id} not found in Preferences.")
        else:
            print("Invalid Preferences file format.")
    except FileNotFoundError:
        print(f"Preferences file not found: {preferences_file}")
    except json.JSONDecodeError:
        print(f"Error parsing JSON from Preferences file: {preferences_file}")
    except Exception as e:
        print(f"An error occurred while disabling extension {extension_id}: {e}")

    return False

def main():
    # Define the Chrome profile path based on the OS
    if os.name == 'nt':  # Windows
        chrome_profile_path = os.path.expandvars(r'%LOCALAPPDATA%\Google\Chrome\User Data\Default')
    else:  # Linux or Mac
        chrome_profile_path = os.path.expanduser('~/.config/google-chrome/Default')

    # Get the list of all installed extensions
    extensions = get_chrome_extensions(chrome_profile_path)
    if not extensions:
        print("No extensions found or unable to access the Chrome profile.")
        return

    print(f"Installed extensions: {extensions}")

    # Disable specific extensions by ID
    extensions_to_disable = [
        "goguardian_extension_id",  # Replace with actual GoGuardian extension ID
        "linewise_extension_id"      # Replace with actual Linewize extension ID
    ]

    for extension_id in extensions_to_disable:
        if extension_id in extensions:
            if disable_extension_by_modifying_preferences(chrome_profile_path, extension_id):
                print(f"Successfully disabled {extension_id}")
            else:
                print(f"Failed to disable {extension_id}")
        else:
            print(f"Extension ID {extension_id} not found among installed extensions.")

if __name__ == "__main__":
    main()

